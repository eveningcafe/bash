---
- name: use image_address from local registry
  set_fact:
    image_address: "{{docker_reg_host}}:{{docker_reg_port}}/{{ ceph_docker_image }}:{{ ceph_docker_image_tag }}"
  when: docker_use_local_registry

- name: use image_address from extenal registry
  set_fact:
    image_address: "{{ ceph_docker_image }}:{{ ceph_docker_image_tag }}"
  when: not docker_use_local_registry
  
- name: prepare size wal
  when: (
         block_wal_size is defined
         and (inventory_hostname == groups['ceph_mon'][0])
        )
  command: "curl 'http://{{kv_endpoint}}:{{kv_port}}/v2/keys/ceph-config/ceph/osd/bluestore_block_wal_size' -XPUT -d value={{ block_wal_size }} "
  
- name: prepare size block db
  when: (
         block_db_size is defined
         and (inventory_hostname == groups['ceph_mon'][0])
        )
  command: "curl 'http://{{kv_endpoint}}:{{kv_port}}/v2/keys/ceph-config/ceph/osd/bluestore_block_db_size' -XPUT -d value={{ block_db_size }} "
  
- name: wipe_out_device_prepare_before_zap
  command: " dd if=/dev/zero of={{ item.path }} bs=1M count=2048 "
  async: "{{wipe_out_one_disk_wait}}"
  poll: 10
  when: wipe_out_disk_before_zap and device_prepare is defined
  loop: "{{ device_prepare }}"
  ignore_errors: yes

  
- name: zap devices
  when: device_prepare is defined
  docker_container:
    name: "ceph_zap_{{ item.name }}"
    state: started
    image: "{{ image_address }}"
    volumes:
      - /dev/:/dev/
    env:
      OSD_DEVICE: "{{ item.path }}"
    privileged: yes
    command: zap_device
  loop: "{{ device_prepare }}"
  loop_control:
    pause: "{{osd_create_paused_time}}"


- name: create OSD
  when: (
         osd_nodes is defined
         and item.wal_disk is not defined
         and item.db_disk is not defined
        )
  docker_container:
    name: "{{ item.name }}"
    state: started
    image: "{{ image_address }}"
    volumes:
      - /dev/:/dev/
      - /var/log/ceph:/var/log/ceph
    env:
      OSD_DEVICE: "{{ item.primary_disk }}"
      KV_TYPE: "{{ kv_type }}"
      KV_IP: "{{ kv_endpoint }}"
      OSD_TYPE: disk
      OSD_BLUESTORE: 1
    pid_mode: host
    privileged: yes
    network_mode: host
    command: osd
    restart_policy: unless-stopped
  loop: "{{ osd_nodes }}"
  loop_control:
    pause: "{{osd_create_paused_time}}"


- name: create OSD sperate wal db
  when: (
         osd_nodes is defined
         and item.wal_disk is defined
         and item.db_disk is defined
        )
  docker_container:
    name: "{{item.name}}"
    state: started
    image: "{{ image_address }}"
    volumes:
      - /dev/:/dev/
      - /var/log/ceph:/var/log/ceph
    env:
      OSD_DEVICE: "{{ item.primary_disk }}"
      KV_TYPE: "{{ kv_type }}"
      KV_IP: "{{ kv_endpoint }}"
      KV_PORT: "{{kv_port}}"
      OSD_TYPE: disk
      OSD_BLUESTORE_BLOCK_WAL: "{{ item.wal_disk }}"
      OSD_BLUESTORE_BLOCK_DB: "{{ item.db_disk }}"
      OSD_BLUESTORE: 1
    pid_mode: host
    privileged: yes   
    network_mode: host
    command: osd   
    restart_policy: unless-stopped
  loop: "{{ osd_nodes }}"
  loop_control:
    pause: "{{osd_create_paused_time}}"


# - name: sleep 600s
#   pause:
#     seconds: 600
- name: wait osd up
  command: "docker logs {{item.name }}"
  register: result
  until: result.stderr.find('log_to_monitors') != -1
  retries: "{{retries_osd}}"
  delay: "{{delay_retries_osd}}"
  failed_when: false
  loop: "{{osd_nodes}}"
  
- name: check up and fix osd 
  include_role:
    name: fixbugosd
    tasks_from: main

- name: update permission log dir
  command: "docker exec {{item.name}} chown -R ceph:ceph /var/log/ceph"
  loop: "{{ osd_nodes }}"
  ignore_errors: yes

- name: restart docker
  command: "docker restart {{item.name}}"
  loop: "{{ osd_nodes }}"
  ignore_errors: yes
